pipeline {
    agent {
        docker {
            image 'teebro/jenkins-agent-docker-python:v1' //custom image 
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }
    
    environment {
        GIT_REPO = 'https://github.com/Teebra/CI-CD-Jenkins-ArgoCD-repo.git'
        ACCESS_KEY = 'githubacc' //GitHub Access Key
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/Teebra/CI-CD-Jenkins-ArgoCD.git']]])
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'pip install -r requirements.txt'
            }
        }

        stage('Run Tests') {
            steps {
                sh 'python -m pytest tests.py'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def imageName = 'teebro/ci-cd-jenkins-argocd'
                    def imageTag = "${env.BUILD_NUMBER}"

                    docker.build("${imageName}:${imageTag}", '.')
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                    def imageName = 'teebro/ci-cd-jenkins-argocd'
                    def imageTag = "${env.BUILD_NUMBER}"
            
                    def dockerImage = docker.image("${imageName}:${imageTag}")
                    //Login in using UserName and Password
                    withDockerRegistry([credentialsId: 'dockerhub_id', url: '']) {
                        dockerImage.push()
                    }
                }
            }
        }
        
        stage('Checkout K8S manifest SCM') {
            steps {
                script {
                    // Clone the repository using access key
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                        userRemoteConfigs: [[url: "${env.GIT_REPO}", credentialsId: '']]])
                    //sh "echo ${env.ACCESS_KEY} > access_key.txt"
                }
            }
        }
        
        stage('Update Deployment YAML') {
            steps {
                script {
                    def deploymentFile = 'deployment.yml'
                    def imageTag = "${env.BUILD_NUMBER}"
                    def sedCommand = "s/image: teebro\\/ci-cd-jenkins-argocd:.*/image: teebro\\/ci-cd-jenkins-argocd:${imageTag}/g"
            
                    sh """
                        sed -i '${sedCommand}' ${deploymentFile}
                    """
                }
            }
        }

        stage('Push to GitHub') {
            steps {
                script {
                    def personalAccessTokenCredentialId = 'githubacc'
                    def email = 'GithubEmail'
                    def userId = 'teebra'
                    def gitRepo = 'https://github.com/Teebra/CI-CD-Jenkins-ArgoCD-repo.git' // Provided GIT_REPO

                    // Configure Git user details
                    sh 'git config --global --add safe.directory /var/lib/jenkins/workspace/automated'
                    sh "git config user.email '${email}'"
                    sh "git config user.name '${userId}'"

                    // Authenticate using personal access token
                    withCredentials([string(credentialsId: personalAccessTokenCredentialId, variable: 'PAT')]) {
                        sh "git config credential.helper '!f() { echo \"username=${PAT}\"; echo \"password=x-oauth-basic\"; }; f'"

                        // Create and switch to a new branch
                        sh 'git checkout -b jenkins-update'

                        // Add, commit, and push changes
                        sh 'git add .'
                        sh 'git commit -am "Updated the deployment yml | Jenkins Pipeline"'
                        sh "git push ${gitRepo} jenkins-update"
                            
                        // Merge and clean up
                        sh 'echo Merging'
                        sh 'git checkout main'
                        sh 'git pull'
                        sh 'git merge jenkins-update'
                        sh 'git push'
                            
                        // Delete remote and local branches
                        sh "git push ${gitRepo} --delete jenkins-update"
                        sh 'git branch -d jenkins-update' // Or git branch -D jenkins-update if needed
                            
                    }
                }
            }
        }

        
    }

    post {
        always {
            cleanWs()
        }
    }
}
